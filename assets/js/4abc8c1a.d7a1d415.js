"use strict";(self.webpackChunkgauntlet_docs=self.webpackChunkgauntlet_docs||[]).push([[62],{6209:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"information/architecture","title":"Architecture","description":"Overview","source":"@site/docs/information/architecture.md","sourceDirName":"information","slug":"/information/architecture","permalink":"/docs/information/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/project-gauntlet/website/tree/main/docs/information/architecture.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Architecture","sidebar_position":2,"sidebar_label":"Architecture"},"sidebar":"docsSidebar","previous":{"title":"Terminology","permalink":"/docs/information/terminology"},"next":{"title":"Versioning","permalink":"/docs/information/versioning"}}');var r=n(4848),s=n(8453);const o={title:"Architecture",sidebar_position:2,sidebar_label:"Architecture"},a=void 0,c={},d=[{value:"Overview",id:"overview",level:2},{value:"Plugin Runtime",id:"plugin-runtime",level:3},{value:"Frontend",id:"frontend",level:3},{value:"Server",id:"server",level:3},{value:"Settings",id:"settings",level:3}];function l(e){const i={a:"a",admonition:"admonition",h2:"h2",h3:"h3",p:"p",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(i.p,{children:"The application consists of 4 modules: server, frontend, plugin runtime and settings."}),"\n",(0,r.jsx)(i.h3,{id:"plugin-runtime",children:"Plugin Runtime"}),"\n",(0,r.jsxs)(i.p,{children:["Gauntlet plugins are written in TypeScript.\nAs JavaScript runtime ",(0,r.jsx)(i.a,{href:"https://deno.com",children:"Deno"})," is used.\nEach plugin runtime runs in a separate Deno Worker in a separate OS process and communicates with server using inter-process communication.\nDeno Workers are sandboxed using ",(0,r.jsx)(i.a,{href:"https://docs.deno.com/runtime/fundamentals/security",children:"Deno's permission model"}),".\nEach plugin must define permissions in ",(0,r.jsx)(i.a,{href:"../plugin-development/manifest#permissions",children:"Plugin Manifest"})," what external resources it needs:\nfilesystem, network, environment variables or subprocess execution, some Gauntlet-specific permissions, etc."]}),"\n",(0,r.jsxs)(i.p,{children:["Plugins can use ",(0,r.jsx)(i.a,{href:"https://github.com/facebook/react",children:"React"})," to create UI that will be rendered by frontend.\nThis is implemented using custom React Reconciler (similar to React Native)."]}),"\n",(0,r.jsx)(i.p,{children:"The Deno runtime is kept alive by the always running event loop that handles incoming events from frontend/server"}),"\n",(0,r.jsx)(i.p,{children:"Plugins are distributed inside the same Git repository which contains the plugin code.\nThere is no central distribution system currently.\nPlugins are installed using the Git repository URL"}),"\n",(0,r.jsx)(i.admonition,{type:"warning",children:(0,r.jsx)(i.p,{children:"Due to limited resources, security measures for Gauntlet application are implemented on a best-effort basis and are not guaranteed"})}),"\n",(0,r.jsx)(i.h3,{id:"frontend",children:"Frontend"}),"\n",(0,r.jsxs)(i.p,{children:["As GUI framework ",(0,r.jsx)(i.a,{href:"https://github.com/iced-rs/iced",children:"iced-rs"})," is used.\nFrontend runs inside the same OS process as server."]}),"\n",(0,r.jsx)(i.h3,{id:"server",children:"Server"}),"\n",(0,r.jsxs)(i.p,{children:["The server is fairly straightforward ",(0,r.jsx)(i.a,{href:"https://tokio.rs/",children:"Tokio"})," runtime.\nAll requests or events from frontend to plugin runtime and vice versa go through the server.\nServer state is stored inside SQLite database"]}),"\n",(0,r.jsx)(i.h3,{id:"settings",children:"Settings"}),"\n",(0,r.jsxs)(i.p,{children:["Settings UI also uses ",(0,r.jsx)(i.a,{href:"https://github.com/iced-rs/iced",children:"iced-rs"})," as a GUI framework.\nIt is run in separate OS process which communicates with server using inter-process communication"]})]})}function u(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);