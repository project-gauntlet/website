"use strict";(self.webpackChunkgauntlet_docs=self.webpackChunkgauntlet_docs||[]).push([[13],{7309:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"troubleshooting","title":"Troubleshooting","description":"Crash logs","source":"@site/docs/troubleshooting.md","sourceDirName":".","slug":"/troubleshooting","permalink":"/docs/troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/project-gauntlet/website/tree/main/docs/troubleshooting.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"title":"Troubleshooting","sidebar_position":9,"sidebar_label":"Troubleshooting"},"sidebar":"docsSidebar","previous":{"title":"Feature Support","permalink":"/docs/feature-support"},"next":{"title":"Getting Started","permalink":"/docs/plugin-development/getting-started"}}');var s=n(4848),o=n(8453);const i={title:"Troubleshooting",sidebar_position:9,sidebar_label:"Troubleshooting"},a=void 0,r={},c=[{value:"Crash logs",id:"crash-logs",level:2},{value:"macOS",id:"macos",level:2},{value:"Gauntlet Logs",id:"gauntlet-logs",level:3},{value:"Console.app",id:"consoleapp",level:3},{value:"Linux",id:"linux",level:2},{value:"Gauntlet Logs",id:"gauntlet-logs-1",level:3}];function d(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"crash-logs",children:"Crash logs"}),"\n",(0,s.jsx)(t.p,{children:"If application panics, the crash logs are saved at following locations:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Windows: ",(0,s.jsx)(t.code,{children:"{FOLDERID_LocalAppData}\\Gauntlet\\data\\logs\\crash.txt"})]}),"\n",(0,s.jsxs)(t.li,{children:["macOS: ",(0,s.jsx)(t.code,{children:"$HOME/Library/Application Support/dev.project-gauntlet.gauntlet/logs/crash.txt"})]}),"\n",(0,s.jsxs)(t.li,{children:["Linux: ",(0,s.jsx)(t.code,{children:"$HOME/.local/state/gauntlet/logs/crash.txt"})," or ",(0,s.jsx)(t.code,{children:"$XDG_STATE_HOME/gauntlet/logs/crash.txt"})]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["In Gauntlet each plugin is run in separate plugin runtime process,\nif that process panics the logs will also be saved at that location but with following name: ",(0,s.jsx)(t.code,{children:"crash-{plugin-internal-uuid}.txt"})]}),"\n",(0,s.jsx)(t.h2,{id:"macos",children:"macOS"}),"\n",(0,s.jsx)(t.h3,{id:"gauntlet-logs",children:"Gauntlet Logs"}),"\n",(0,s.jsx)(t.p,{children:"To see the Gauntlet application logs on macOS do the following:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Stop any running instance of Gauntlet"}),"\n",(0,s.jsxs)(t.li,{children:["In terminal run: ",(0,s.jsx)(t.code,{children:"open -n /Applications/Gauntlet.app --stdout ./gauntlet.log --stderr ./gauntlet.log"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"gauntlet.log"})," file in current directory will contain the logs"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"consoleapp",children:"Console.app"}),"\n",(0,s.jsx)(t.p,{children:"macOS does a some additional validation on the binary before it is even started,\nany errors that occur at this stage should be visible in Console.app"}),"\n",(0,s.jsx)(t.h2,{id:"linux",children:"Linux"}),"\n",(0,s.jsx)(t.h3,{id:"gauntlet-logs-1",children:"Gauntlet Logs"}),"\n",(0,s.jsxs)(t.p,{children:["On Linux on Systemd-based systems Gauntlet is usually started as user service.\nTo get logs Gauntlet Application logs in this setup run: ",(0,s.jsx)(t.code,{children:"journalctl --user -u gauntlet"})]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);