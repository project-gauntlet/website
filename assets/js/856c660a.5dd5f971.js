"use strict";(self.webpackChunkgauntlet_docs=self.webpackChunkgauntlet_docs||[]).push([[898],{8718:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"plugin-development/file-structure","title":"Plugin File Structure","description":"Overview","source":"@site/docs/plugin-development/file-structure.md","sourceDirName":"plugin-development","slug":"/plugin-development/file-structure","permalink":"/docs/plugin-development/file-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/project-gauntlet/website/tree/main/docs/plugin-development/file-structure.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Plugin File Structure","sidebar_position":3,"sidebar_label":"File Structure"},"sidebar":"docsSidebar","previous":{"title":"Manifest","permalink":"/docs/plugin-development/manifest"},"next":{"title":"Detail","permalink":"/docs/api-reference/entrypoint-types/view/details"}}');var t=i(4848),r=i(8453);const l={title:"Plugin File Structure",sidebar_position:3,sidebar_label:"File Structure"},d=void 0,o={},c=[{value:"Overview",id:"overview",level:2},{value:"Plugin manifest",id:"plugin-manifest",level:2},{value:"Source Code",id:"source-code",level:2},{value:"Assets",id:"assets",level:2},{value:"<code>dist</code> directory",id:"dist-directory",level:2},{value:"Dependency management",id:"dependency-management",level:2},{value:"Other",id:"other",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"Here file structure of a plugin is described"}),"\n",(0,t.jsx)(n.p,{children:"Notable directories and files of a plugin are following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"plugin\n\u251c\u2500\u2500 assets\n\u2502   \u2514\u2500\u2500 icon.png\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 entrypoint.tsx\n\u251c\u2500\u2500 dist\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 gauntlet.toml\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tsconfig.json\n"})}),"\n",(0,t.jsx)(n.h2,{id:"plugin-manifest",children:"Plugin manifest"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"gauntlet.toml"})," is a plugin manifest.\nIt is used to describe the plugin, what entrypoints does it have, what preferences, what permissions it requires"]}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"/docs/plugin-development/manifest",children:"Plugin Manifest"})]}),"\n",(0,t.jsx)(n.h2,{id:"source-code",children:"Source Code"}),"\n",(0,t.jsxs)(n.p,{children:["All source files go into ",(0,t.jsx)(n.code,{children:"src"})," directory. Currently, only TypeScript language is officially supported, which uses ",(0,t.jsx)(n.code,{children:".ts"})," or ",(0,t.jsx)(n.code,{children:".tsx"})," file extensions.\n",(0,t.jsx)(n.code,{children:".tsx"})," is used everywhere where some kind of UI is being created"]}),"\n",(0,t.jsx)(n.h2,{id:"assets",children:"Assets"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"assets"})," directory contains files which will be downloaded together with the plugin itself.\nIt is optional and is only required if plugin has at least one asset"]}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"/docs/api-reference/assets",children:"Assets"})]}),"\n",(0,t.jsxs)(n.h2,{id:"dist-directory",children:[(0,t.jsx)(n.code,{children:"dist"})," directory"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"dist"})," directory contains compiled plugin. It is created when starting dev server or when publishing the plugin"]}),"\n",(0,t.jsx)(n.h2,{id:"dependency-management",children:"Dependency management"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"node_modules"}),", ",(0,t.jsx)(n.code,{children:"package-lock.json"})," and ",(0,t.jsx)(n.code,{children:"package.json"})," all belong to Node.js and npm.\nEven though Gauntlet uses Deno to run plugins, Node.js is used to run tooling: gather dependencies, run dev server, publish, etc."]}),"\n",(0,t.jsx)(n.h2,{id:"other",children:"Other"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"tsconfig.json"})," is a configuration file for TypeScript language compiler"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);